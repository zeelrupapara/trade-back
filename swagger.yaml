openapi: 3.0.3
info:
  title: Trade-Back API
  description: |
    High-Performance Trading Backend API
    
    This API provides real-time market data streaming, technical indicators, 
    and historical data management for cryptocurrency trading.
    
    ## Features
    - Real-time price streaming via WebSocket (250-450+ msg/sec)
    - Historical data backfilling and management
    - Technical indicators (Enigma with Fibonacci levels)
    - Market watchlist management with auto-subscription
    - High-frequency data updates with binary protocol option
    - Session-based authentication for personalized features
    - Automatic symbol loading from Binance on startup
    
    ## WebSocket Protocol
    The WebSocket endpoint supports both JSON and binary protocols for optimal performance.
    Binary protocol reduces message size by 72% and parsing time by 16x.
    
    ## Market Watch Auto-Subscription
    When a symbol is added to the market watch list:
    1. All WebSocket connections with the same session token auto-subscribe
    2. Real-time prices start streaming immediately
    3. Only subscribed symbols receive price updates (efficient bandwidth usage)
    
    ## Rate Limits
    - REST API: 100 requests per minute per IP
    - WebSocket: No rate limit for subscriptions
    - Historical backfill: 10 requests per second (Binance limits)
  version: 1.0.0
  contact:
    name: Trading Team
    email: support@trade-back.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.trade-back.com/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: System
    description: System health and status endpoints
  - name: Market Data
    description: Real-time and historical market data
  - name: Indicators
    description: Technical indicators and calculations
  - name: Historical
    description: Historical data management and backfilling
  - name: Watchlist
    description: Market watchlist operations
  - name: WebSocket
    description: Real-time data streaming
  - name: TradingView
    description: TradingView charting library integration

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: |
        Authenticate a user and receive a session token.
        
        **Demo Credentials:**
        - Username: `demo`
        - Password: `demo123`
        
        The session token should be included in all subsequent requests
        that require authentication using the `X-Session-Token` header.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: demo
                password:
                  type: string
                  format: password
                  example: demo123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Session token (use in X-Session-Token header)
                    example: a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890
                  expires_at:
                    type: string
                    format: date-time
                    description: Token expiration time
                    example: "2024-01-16T10:30:00Z"
                  user_id:
                    type: string
                    description: User identifier
                    example: user_demo
        '400':
          description: Bad request - missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: |
        Invalidate the current session token.
        After logout, the token cannot be used for authentication.
      operationId: logout
      security:
        - SessionAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/session:
    get:
      tags: [Authentication]
      summary: Get session info
      description: |
        Retrieve information about the current session.
        Use this to verify if a session token is still valid.
      operationId: getSession
      security:
        - SessionAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          description: Session information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: user_demo
                  username:
                    type: string
                    example: demo
                  created_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  expires_at:
                    type: string
                    format: date-time
                    example: "2024-01-16T10:30:00Z"
                  valid:
                    type: boolean
                    example: true
        '401':
          description: Invalid or expired session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Invalid or expired session

  /health:
    get:
      tags: [System]
      summary: Health check
      description: Check the health status of all system components
      operationId: getHealth
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: healthy
                services:
                  mysql: true
                  influx: true
                  redis: true
                  nats: true
                timestamp: 1640995200
                websocket_clients: 42

  /symbols:
    get:
      tags: [Market Data]
      summary: Get trading symbols
      description: Retrieve a list of available trading symbols with optional filtering
      operationId: getSymbols
      parameters:
        - name: exchange
          in: query
          description: Filter by exchange
          schema:
            type: string
            example: BINANCE
        - name: type
          in: query
          description: Filter by symbol type
          schema:
            type: string
            enum: [spot, futures]
            example: spot
        - name: active
          in: query
          description: Filter by active status
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: List of symbols
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbols:
                    type: array
                    items:
                      $ref: '#/components/schemas/Symbol'
                  count:
                    type: integer
                    example: 350

  /symbols/{symbol}:
    get:
      tags: [Market Data]
      summary: Get symbol details
      description: Retrieve detailed information about a specific trading symbol
      operationId: getSymbol
      parameters:
        - $ref: '#/components/parameters/Symbol'
      responses:
        '200':
          description: Symbol details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Symbol'
        '404':
          $ref: '#/components/responses/NotFound'

  /symbols/{symbol}/price:
    get:
      tags: [Market Data]
      summary: Get current price
      description: Retrieve the current price and related market data for a symbol
      operationId: getPrice
      parameters:
        - $ref: '#/components/parameters/Symbol'
      responses:
        '200':
          description: Current price data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceData'
              example:
                symbol: BTCUSDT
                price: 42150.50
                bid: 42150.40
                ask: 42150.60
                volume: 15234.567
                timestamp: "2024-01-15T10:30:00Z"
                sequence: 1234567890
        '404':
          $ref: '#/components/responses/NotFound'

  /symbols/{symbol}/bars:
    get:
      tags: [Market Data]
      summary: Get historical bars
      description: Retrieve historical OHLCV (candlestick) data for a symbol
      operationId: getBars
      parameters:
        - $ref: '#/components/parameters/Symbol'
        - name: resolution
          in: query
          description: Bar resolution/timeframe
          schema:
            type: string
            enum: [1m, 5m, 15m, 30m, 1h, 4h, 1d]
            default: 1m
            example: 1h
        - name: from
          in: query
          description: Start timestamp (Unix timestamp)
          schema:
            type: integer
            format: int64
            example: 1640995200
        - name: to
          in: query
          description: End timestamp (Unix timestamp)
          schema:
            type: integer
            format: int64
            example: 1641081600
        - name: limit
          in: query
          description: Maximum number of bars to return
          schema:
            type: integer
            default: 300
            maximum: 5000
            example: 100
      responses:
        '200':
          description: Historical bars data
          content:
            application/json:
              schema:
                type: object
                properties:
                  bars:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bar'
                  symbol:
                    type: string
                    example: BTCUSDT
                  resolution:
                    type: string
                    example: 1h

  /symbols/{symbol}/enigma:
    get:
      tags: [Indicators]
      summary: Get Enigma indicator
      description: |
        Retrieve the Enigma technical indicator values including Fibonacci levels.
        The Enigma indicator calculates the current price position between ATH and ATL
        as a percentage (0-100), where:
        - 0 = Price at All-Time Low
        - 100 = Price at All-Time High
        - 50 = Price at midpoint between ATH and ATL
      operationId: getEnigma
      parameters:
        - $ref: '#/components/parameters/Symbol'
      responses:
        '200':
          description: Enigma indicator data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnigmaData'
              example:
                symbol: BTCUSDT
                level: 75.5
                ath: 69000.00
                atl: 3000.00
                current_price: 49830.00
                fib_levels:
                  "0": 3000.00
                  "23.6": 18584.80
                  "38.2": 28211.20
                  "50": 36000.00
                  "61.8": 43788.80
                  "78.6": 54874.40
                  "100": 69000.00
                timestamp: "2024-01-15T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          description: Enigma calculator unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /marketwatch:
    get:
      tags: [Watchlist]
      summary: Get market watchlist
      description: |
        Retrieve the user's market watchlist with optional real-time price data.
        Requires session authentication.
        
        Use the `detailed=true` query parameter to include full market data for each symbol.
      operationId: getWatchlist
      security:
        - SessionAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - name: detailed
          in: query
          description: Include detailed market data for each symbol
          schema:
            type: boolean
            default: false
            example: true
      responses:
        '200':
          description: Watchlist data
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Simple response (detailed=false)
                    properties:
                      symbols:
                        type: array
                        items:
                          type: string
                        example: ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
                      count:
                        type: integer
                        example: 3
                  - type: object
                    description: Detailed response (detailed=true)
                    properties:
                      symbols:
                        type: array
                        items:
                          $ref: '#/components/schemas/MarketWatchSymbol'
                      count:
                        type: integer
                        example: 3
                      timestamp:
                        type: integer
                        format: int64
                        example: 1704384000
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Watchlist]
      summary: Add to watchlist
      description: |
        Add a symbol to the market watchlist. This will automatically
        subscribe all WebSocket connections with the same session token
        to receive price updates for this symbol.
      operationId: addToWatchlist
      security:
        - SessionAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol]
              properties:
                symbol:
                  type: string
                  example: BTCUSDT
      responses:
        '200':
          description: Symbol added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  symbol:
                    type: string
                    example: BTCUSDT
        '400':
          description: Bad request or watchlist limit reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /marketwatch/{symbol}:
    delete:
      tags: [Watchlist]
      summary: Remove from watchlist
      description: |
        Remove a symbol from the market watchlist. This will automatically
        unsubscribe all WebSocket connections with the same session token
        from receiving price updates for this symbol.
      operationId: removeFromWatchlist
      security:
        - SessionAuth: []
      parameters:
        - $ref: '#/components/parameters/Symbol'
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          description: Symbol removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  symbol:
                    type: string
                    example: BTCUSDT
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /historical/info:
    get:
      tags: [Historical]
      summary: Get historical API info
      description: Get information about the historical data API and available features
      operationId: getHistoricalInfo
      parameters:
        - name: symbol
          in: query
          description: Get info for specific symbol
          schema:
            type: string
            example: BTCUSDT
      responses:
        '200':
          description: Historical API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalInfo'

  /historical/backfill/symbol:
    post:
      tags: [Historical]
      summary: Backfill single symbol
      description: |
        Load historical market data for a specific trading symbol.
        This operation runs asynchronously and returns a task ID for tracking.
        
        The backfill will:
        1. Fetch historical klines from Binance
        2. Store them in InfluxDB
        3. Update cache with latest data
        4. Calculate ATH/ATL if not exists
      operationId: backfillSymbol
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackfillSymbolRequest'
            example:
              symbol: BTCUSDT
              interval: 1d
              days: 365
      responses:
        '202':
          description: Backfill task accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /historical/backfill/all:
    post:
      tags: [Historical]
      summary: Backfill all symbols
      description: |
        Load historical market data for all active trading symbols.
        This operation runs asynchronously and returns a task ID for tracking.
        
        Warning: This can take a long time and consume significant resources.
      operationId: backfillAll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackfillAllRequest'
            example:
              interval: 1d
              days: 730
      responses:
        '202':
          description: Backfill task accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /historical/ath-atl:
    post:
      tags: [Historical]
      summary: Calculate ATH/ATL
      description: |
        Calculate all-time high and all-time low values from historical data.
        If historical data is not available, it will first load 2 years of daily data.
      operationId: calculateATHATL
      responses:
        '202':
          description: ATH/ATL calculation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: accepted
                  message:
                    type: string
                    example: ATH/ATL calculation started
                  task_id:
                    type: string
                    example: task_lqr8n3k4_g7h8i9
                  start_time:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalError'

  /historical/status/{taskId}:
    get:
      tags: [Historical]
      summary: Get task status
      description: Check the status of a historical data backfill task
      operationId: getTaskStatus
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task ID returned from backfill operation
          schema:
            type: string
            example: task_lqr8n3k2_a3b4c5
      responses:
        '200':
          description: Task status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '404':
          $ref: '#/components/responses/NotFound'

  /tradingview/config:
    get:
      tags: [TradingView]
      summary: Get TradingView configuration
      description: Returns the UDF datafeed configuration for TradingView charting library
      operationId: getTradingViewConfig
      responses:
        '200':
          description: TradingView configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingViewConfig'

  /tradingview/search:
    get:
      tags: [TradingView]
      summary: Search symbols
      description: Search for trading symbols compatible with TradingView
      operationId: searchTradingViewSymbols
      parameters:
        - name: query
          in: query
          required: true
          description: Search query
          schema:
            type: string
            example: BTC
        - name: type
          in: query
          description: Symbol type filter
          schema:
            type: string
        - name: exchange
          in: query
          description: Exchange filter
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum results
          schema:
            type: integer
            default: 30
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TradingViewSymbol'

  /tradingview/symbols:
    get:
      tags: [TradingView]
      summary: Get symbol info
      description: Get detailed symbol information for TradingView
      operationId: getTradingViewSymbolInfo
      parameters:
        - name: group
          in: query
          required: true
          description: Symbol or group name
          schema:
            type: string
            example: BTCUSDT
      responses:
        '200':
          description: Symbol information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingViewSymbolInfo'

  /tradingview/history:
    get:
      tags: [TradingView]
      summary: Get price history
      description: Get historical price data in TradingView UDF format
      operationId: getTradingViewHistory
      parameters:
        - name: symbol
          in: query
          required: true
          schema:
            type: string
        - name: resolution
          in: query
          required: true
          description: Chart resolution (1, 5, 15, 30, 60, 240, D, W, M)
          schema:
            type: string
        - name: from
          in: query
          required: true
          description: Unix timestamp
          schema:
            type: integer
        - name: to
          in: query
          required: true
          description: Unix timestamp
          schema:
            type: integer
      responses:
        '200':
          description: Historical data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingViewHistory'

  /tradingview/marks:
    get:
      tags: [TradingView]
      summary: Get chart marks
      description: Get marks for the chart (not implemented)
      operationId: getTradingViewMarks
      parameters:
        - name: symbol
          in: query
          required: true
          schema:
            type: string
        - name: resolution
          in: query
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: true
          schema:
            type: integer
        - name: to
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chart marks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /tradingview/time:
    get:
      tags: [TradingView]
      summary: Get server time
      description: Get current server Unix timestamp
      operationId: getTradingViewTime
      responses:
        '200':
          description: Server timestamp
          content:
            text/plain:
              schema:
                type: integer
                example: 1704384000

  /tradingview/indicators/{symbol}/enigma:
    get:
      tags: [TradingView]
      summary: Get Enigma indicator for TradingView
      description: Get Enigma indicator data formatted for TradingView
      operationId: getTradingViewEnigma
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Enigma indicator data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingViewEnigma'

  /ws:
    get:
      tags: [WebSocket]
      summary: WebSocket connection
      description: |
        Establish a WebSocket connection for real-time market data streaming.
        
        ## Connection Methods
        
        ### 1. With Session Token (Recommended)
        ```
        ws://localhost:8080/api/v1/ws?token=YOUR_SESSION_TOKEN
        ```
        - Automatically subscribes to market watch symbols
        - Receives auto-subscribe/unsubscribe events when watchlist changes
        
        ### 2. Without Session (Public data only)
        ```
        ws://localhost:8080/api/v1/ws
        ```
        
        ## Message Types
        
        ### JSON Messages
        - `market_watch_subscribe`: Initial subscription to watchlist symbols
        - `auto_subscribe`: Symbol added to watchlist
        - `auto_unsubscribe`: Symbol removed from watchlist
        - `ping`/`pong`: Connection heartbeat
        - `subscribe`/`unsubscribe`: Manual symbol subscription
        
        ### Binary Protocol
        - 72% smaller messages, 16x faster parsing
        - Type 384: Price batch updates
        - Average message size: ~1364 bytes
        
        ## Auto-Subscription Feature
        When connected with a session token, the WebSocket automatically:
        1. Subscribes to all symbols in your market watchlist on connection
        2. Auto-subscribes when you add symbols via REST API
        3. Auto-unsubscribes when you remove symbols via REST API
      operationId: connectWebSocket
      parameters:
        - name: token
          in: query
          description: Session token for authenticated features
          schema:
            type: string
      responses:
        '101':
          description: Switching Protocols
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: header
      name: X-Session-Token
      description: Session token for authenticated endpoints

  parameters:
    Symbol:
      name: symbol
      in: path
      required: true
      description: Trading symbol
      schema:
        type: string
        pattern: '^[A-Z]+$'
        example: BTCUSDT
    
    SessionToken:
      name: X-Session-Token
      in: header
      required: true
      description: Session token for authentication
      schema:
        type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Invalid request parameters

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Session token required

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Symbol not found

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Internal server error

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required: [error]

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        services:
          type: object
          properties:
            mysql:
              type: boolean
            influx:
              type: boolean
            redis:
              type: boolean
            nats:
              type: boolean
        timestamp:
          type: integer
          format: int64
        websocket_clients:
          type: integer

    Symbol:
      type: object
      properties:
        id:
          type: integer
          example: 1
        symbol:
          type: string
          example: BTCUSDT
        exchange:
          type: string
          example: BINANCE
        full_name:
          type: string
          example: Bitcoin/Tether
        instrument_type:
          type: string
          example: SPOT
        base_currency:
          type: string
          example: BTC
        quote_currency:
          type: string
          example: USDT
        is_active:
          type: boolean
          example: true
        min_price_increment:
          type: number
          format: double
          example: 0.01
        min_quantity_increment:
          type: number
          format: double
          example: 0.00001

    PriceData:
      type: object
      properties:
        symbol:
          type: string
        price:
          type: number
          format: double
        bid:
          type: number
          format: double
        ask:
          type: number
          format: double
        volume:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        sequence:
          type: integer
          format: int64

    Bar:
      type: object
      properties:
        time:
          type: integer
          format: int64
          description: Unix timestamp
        open:
          type: number
          format: double
        high:
          type: number
          format: double
        low:
          type: number
          format: double
        close:
          type: number
          format: double
        volume:
          type: number
          format: double

    EnigmaData:
      type: object
      properties:
        symbol:
          type: string
        level:
          type: number
          format: double
          minimum: 0
          maximum: 100
          description: Current price position between ATL (0) and ATH (100)
        ath:
          type: number
          format: double
          description: All-time high price
        atl:
          type: number
          format: double
          description: All-time low price
        current_price:
          type: number
          format: double
        fib_levels:
          type: object
          description: Fibonacci retracement levels
          properties:
            "0":
              type: number
              format: double
            "23.6":
              type: number
              format: double
            "38.2":
              type: number
              format: double
            "50":
              type: number
              format: double
            "61.8":
              type: number
              format: double
            "78.6":
              type: number
              format: double
            "100":
              type: number
              format: double
        timestamp:
          type: string
          format: date-time

    BackfillSymbolRequest:
      type: object
      required: [symbol, interval, days]
      properties:
        symbol:
          type: string
          pattern: '^[A-Z]+$'
        interval:
          type: string
          enum: [1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M]
        days:
          type: integer
          minimum: 1
          maximum: 1500

    BackfillAllRequest:
      type: object
      required: [interval, days]
      properties:
        interval:
          type: string
          enum: [1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M]
        days:
          type: integer
          minimum: 1
          maximum: 1500

    BackfillResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        symbol:
          type: string
        symbols:
          type: array
          items:
            type: string
        interval:
          type: string
        days:
          type: integer
        start_time:
          type: string
          format: date-time
        task_id:
          type: string

    TaskStatus:
      type: object
      properties:
        task_id:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        message:
          type: string
        progress:
          type: integer
          minimum: 0
          maximum: 100
        error:
          type: string

    HistoricalInfo:
      type: object
      properties:
        message:
          type: string
        endpoints:
          type: object
          additionalProperties:
            type: string
        supported_intervals:
          type: array
          items:
            type: string
        max_days:
          type: integer
        symbol_info:
          type: object
          properties:
            symbol:
              type: string
            data_range:
              type: object
              properties:
                from:
                  type: string
                  format: date-time
                to:
                  type: string
                  format: date-time

    MarketWatchSymbol:
      type: object
      description: Symbol data with real-time market information
      properties:
        symbol:
          type: string
          example: BTCUSDT
        price:
          type: number
          format: double
          example: 42150.50
        bid:
          type: number
          format: double
          example: 42150.40
        bidSize:
          type: number
          format: double
          example: 2.5
        ask:
          type: number
          format: double
          example: 42150.60
        askSize:
          type: number
          format: double
          example: 1.8
        high:
          type: number
          format: double
          example: 43200.00
        low:
          type: number
          format: double
          example: 41000.00
        volume:
          type: number
          format: double
          example: 15234.567
        change:
          type: number
          format: double
          example: 1150.50
        changePercent:
          type: number
          format: double
          example: 2.81
        timestamp:
          type: integer
          format: int64
          example: 1704384000

    TradingViewConfig:
      type: object
      properties:
        supports_search:
          type: boolean
          example: true
        supports_group_request:
          type: boolean
          example: false
        supports_marks:
          type: boolean
          example: true
        supports_timescale_marks:
          type: boolean
          example: true
        supports_time:
          type: boolean
          example: true
        exchanges:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              name:
                type: string
              desc:
                type: string
        symbolsTypes:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              name:
                type: string
        supportedResolutions:
          type: array
          items:
            type: string
          example: ["1", "5", "15", "30", "60", "240", "D"]

    TradingViewSymbol:
      type: object
      properties:
        symbol:
          type: string
          example: BTCUSDT
        full_name:
          type: string
          example: BINANCE:BTCUSDT
        description:
          type: string
          example: Bitcoin / Tether
        exchange:
          type: string
          example: BINANCE
        type:
          type: string
          example: crypto

    TradingViewSymbolInfo:
      type: object
      properties:
        symbol:
          type: array
          items:
            type: string
          example: ["BTCUSDT"]
        description:
          type: array
          items:
            type: string
          example: ["Bitcoin / Tether"]
        exchange-listed:
          type: array
          items:
            type: string
          example: ["BINANCE"]
        exchange-traded:
          type: array
          items:
            type: string
          example: ["BINANCE"]
        minmov:
          type: array
          items:
            type: integer
          example: [1]
        pricescale:
          type: array
          items:
            type: integer
          example: [100]
        type:
          type: array
          items:
            type: string
          example: ["crypto"]
        session:
          type: array
          items:
            type: string
          example: ["24x7"]
        has_intraday:
          type: array
          items:
            type: boolean
          example: [true]
        supported_resolutions:
          type: array
          items:
            type: array
            items:
              type: string
        intraday_multipliers:
          type: array
          items:
            type: array
            items:
              type: string
        has_seconds:
          type: array
          items:
            type: boolean
        has_daily:
          type: array
          items:
            type: boolean
        has_weekly_and_monthly:
          type: array
          items:
            type: boolean

    TradingViewHistory:
      type: object
      properties:
        s:
          type: string
          enum: [ok, no_data, error]
          example: ok
        t:
          type: array
          description: Time values (Unix timestamps)
          items:
            type: integer
        o:
          type: array
          description: Open prices
          items:
            type: number
        h:
          type: array
          description: High prices
          items:
            type: number
        l:
          type: array
          description: Low prices
          items:
            type: number
        c:
          type: array
          description: Close prices
          items:
            type: number
        v:
          type: array
          description: Volume values
          items:
            type: number

    TradingViewEnigma:
      type: object
      properties:
        name:
          type: string
          example: Enigma
        full_name:
          type: string
          example: Enigma Indicator
        plots:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: enigma_level
              type:
                type: string
                example: line
              data:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: integer
                    value:
                      type: number